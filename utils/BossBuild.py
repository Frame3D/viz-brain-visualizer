#!/usr/bin/env python
# Works with Python 2.7, not 3.3

"""
Usage: BossBuild.py

Builds a production version of BOSS and Brain Visualizer and deploys it
to Dropbox, including documentation and configuration files.
"""

from __future__ import print_function, with_statement

import time
import _winreg as winreg
import traceback
import subprocess
import os
import os.path
import shutil
import zipfile

################################################################################

BUILD_NAME_FMT = 'BossBuild{timestamp}'

DEPLOY_BASE_PATH = 'C:/Users/Jack/Desktop/ProductionBuilds'
DROPBOX_BASE_PATH = 'C:/Dropbox/INIT/ProductionBuilds'

BOSS_MAJOR_VERSION = 8

INIT_VCXPROJ_FILE = 'C:/Code/Jack/INIT/Current/msvc/Init/Init.vcxproj'
VIZ_VCXPROJ_FILE = 'C:/Code/Jack/Visualizer/Current/ide/vs2012/Brain Visualizer.vcxproj'

VERSION_HEADERS = {
'C:/Code/Jack/INIT/Current/Version.h': 'BOSS',
'C:/Code/Jack/Visualizer/Current/src/version.h': 'VIZ'
}
VERSION_HEADER_FMT = '''// Generated by BossBuild.py
#ifndef {name}_VERSION
#define {name}_VERSION {version_commas}
#define {name}_VERSION_DOTS {version_dots}
#define {name}_VERSION_STRING "{version_dots}"
#endif
'''

BUILD_ARGS = {
'BOSS.exe for 64-bit': [INIT_VCXPROJ_FILE, '/p:Configuration=Production', '/p:Platform=x64'],
'BOSS.exe for 32-bit': [INIT_VCXPROJ_FILE, '/p:Configuration=Production', '/p:Platform=x86'],
'viz.exe for 64-bit': [VIZ_VCXPROJ_FILE, '/p:Configuration=Release', '/p:Platform=x64'],
'viz.exe for 32-bit': [VIZ_VCXPROJ_FILE, '/p:Configuration=Release', '/p:Platform=x86'],
'large viz.exe for 64-bit': [VIZ_VCXPROJ_FILE, '/p:Configuration=Large', '/p:Platform=x64'],
'large viz.exe for 32-bit': [VIZ_VCXPROJ_FILE, '/p:Configuration=Large', '/p:Platform=x86']
}

DEPLOY_FILES = {
'': [
	'C:/Code/Jack/INIT/Current/Release Notes.rtf',
	'C:/Code/Jack/Visualizer/Current/doc/usage_instructions.pdf',
	'C:/Code/Jack/Visualizer/Current/doc/viz_documentation.pdf',
	'C:/Code/Jack/Visualizer/Current/doc/viz_toolbar.docx'
],
'x64': [
	'C:/Code/Jack/INIT/Current/msvc/Init/x64/Production/BOSS.exe',
	'C:/Code/Jack/Visualizer/Current/bin/win32/x64/Release/viz.exe',
	('C:/Code/Jack/Visualizer/Current/bin/win32/x64/Large/viz.exe', 'viz-large.exe'),
	'C:/Windows/System32/msvcp110.dll',
	'C:/Windows/System32/msvcr110.dll',
	'C:/Code/Jack/INIT/Current/InputCat.xml',
	'C:/Code/Jack/INIT/Current/InputSimLearning.xml',
	'C:/Code/Jack/Visualizer/Current/config/viz.cfg',
	'C:/Code/Jack/Visualizer/Current/config/help.html'
],
'x86': [
	'C:/Code/Jack/INIT/Current/msvc/Init/Production/BOSS.exe',
	'C:/Code/Jack/Visualizer/Current/bin/win32/Release/viz.exe',
	('C:/Code/Jack/Visualizer/Current/bin/win32/Large/viz.exe', 'viz-large.exe'),
	'C:/Windows/SysWOW64/msvcp110.dll',
	'C:/Windows/SysWOW64/msvcr110.dll',
	'C:/Code/Jack/INIT/Current/InputCat.xml',
	'C:/Code/Jack/INIT/Current/InputSimLearning.xml',
	'C:/Code/Jack/Visualizer/Current/config/viz.cfg',
	'C:/Code/Jack/Visualizer/Current/config/help.html'
]}

UPX_PATH = 'C:/Program Files (x86)/UPX/upx.exe'

################################################################################

# color_console.py
# Copyright (C) Andre Burgaud
# http://www.burgaud.com/bring-colors-to-the-windows-console-with-python/

import ctypes

SHORT = ctypes.c_short
WORD = ctypes.c_ushort

class COORD(ctypes.Structure):
	"""struct in wincon.h."""
	_fields_ = [
		("X", SHORT),
		("Y", SHORT)]

class SMALL_RECT(ctypes.Structure):
	"""struct in wincon.h."""
	_fields_ = [
		("Left", SHORT),
		("Top", SHORT),
		("Right", SHORT),
		("Bottom", SHORT)]

class CONSOLE_SCREEN_BUFFER_INFO(ctypes.Structure):
	"""struct in wincon.h."""
	_fields_ = [
		("dwSize", COORD),
		("dwCursorPosition", COORD),
		("wAttributes", WORD),
		("srWindow", SMALL_RECT),
		("dwMaximumWindowSize", COORD)]

# winbase.h
STD_INPUT_HANDLE  = -10
STD_OUTPUT_HANDLE = -11
STD_ERROR_HANDLE  = -12

# wincon.h
FOREGROUND_BLACK     = 0x0000
FOREGROUND_BLUE      = 0x0001
FOREGROUND_GREEN     = 0x0002
FOREGROUND_CYAN      = 0x0003
FOREGROUND_RED       = 0x0004
FOREGROUND_MAGENTA   = 0x0005
FOREGROUND_YELLOW    = 0x0006
FOREGROUND_GREY      = 0x0007
FOREGROUND_INTENSITY = 0x0008 # foreground color is intensified.

BACKGROUND_BLACK     = 0x0000
BACKGROUND_BLUE      = 0x0010
BACKGROUND_GREEN     = 0x0020
BACKGROUND_CYAN      = 0x0030
BACKGROUND_RED       = 0x0040
BACKGROUND_MAGENTA   = 0x0050
BACKGROUND_YELLOW    = 0x0060
BACKGROUND_GREY      = 0x0070
BACKGROUND_INTENSITY = 0x0080 # background color is intensified.

STDOUT_HANDLE = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)

SetConsoleTextAttribute = ctypes.windll.kernel32.SetConsoleTextAttribute
GetConsoleScreenBufferInfo = ctypes.windll.kernel32.GetConsoleScreenBufferInfo

def get_text_attrs():
	csbi = CONSOLE_SCREEN_BUFFER_INFO()
	GetConsoleScreenBufferInfo(STDOUT_HANDLE, ctypes.byref(csbi))
	return csbi.wAttributes

def set_text_attrs(attrs):
	SetConsoleTextAttribute(STDOUT_HANDLE, attrs)

DEFAULT_TEXT_ATTRS = get_text_attrs()

################################################################################

BUILD_NAME = None # will be BUILD_NAME_FMT % timestamp

DEPLOY_PATH = None # will be DEPLOY_BASE_PATH/BUILD_NAME
DROPBOX_PATH = None # will be DROPBOX_BASE_PATH/BUILD_NAME

BOSS_VERSION_COMMAS = None # will be 'BOSS_MAJOR_VERSION,YEAR,MONTH,DAY'
BOSS_VERSION_DOTS = None # will be 'BOSS_MAJOR_VERSION.YEAR.MONTH.DAY'

MSBUILD_PATH = None # will be full path to MSBuild.exe

################################################################################

def join(a, b):
	return a + '/' + b if a and b else a + b

def get_msbuild_location():
	key_name = r'SOFTWARE\Microsoft\MSBuild\ToolsVersions\4.0'
	value_name = 'MSBuildToolsPath'
	log(LOG_DEBUG, r'Getting %s from HKLM\%s...' % (value_name, key_name))
	try:
		registry = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
		key = winreg.OpenKey(registry, key_name)
		value = winreg.QueryValueEx(key, value_name)
		path = value[0]
		if not path.endswith('\\'):
			path += '\\'
		location = path + 'MSBuild.exe'
		return location
	except Exception as ex:
		log(LOG_ERROR, 'Could not locate MSBuild.exe!')
		log(LOG_ERROR, traceback.format_exc(), False)
		exit(1)

def ensure_dir_exists(d):
	if not os.path.exists(d):
		log(LOG_DEBUG, 'Creating directory: %s' % d)
		os.makedirs(d)

def traverse_dir(d):
	for (path, dirs, names) in os.walk(d):
		for name in names:
			file = join(path, name)
			yield file

def src_file_dst_name(src_file):
	dst_name = None
	if isinstance(src_file, tuple):
		src_file, dst_name = src_file
	else:
		dst_name = os.path.basename(src_file)
	return (src_file, dst_name)

def get_version_components():
	year, month, day = [int(s.lstrip('0')) for s in time.strftime('%y/%m/%d').split('/')]
	return (BOSS_MAJOR_VERSION, year, month, day)

def update_version_header(version_file):
	project_name = VERSION_HEADERS[version_file]
	log(LOG_DEBUG, 'Updating %s version header: %s' % (project_name, version_file))
	try:
		f = open(version_file, 'w')
		f.write(VERSION_HEADER_FMT.format(name=project_name,
			version_commas=BOSS_VERSION_COMMAS, version_dots=BOSS_VERSION_DOTS))
		f.close()
	except Exception as ex:
		log(LOG_ERROR, 'Could not update %s!' % version_file)
		log(LOG_ERROR, traceback.format_exc(), False)
		exit(1)

def build_project(build_name):
	log(LOG_DEBUG, 'Building %s...' % build_name)
	args = [MSBUILD_PATH] + BUILD_ARGS[build_name]
	return_code = subprocess.call(args, stdout=LOG_HANDLE)
	if return_code != 0:
		log(LOG_ERROR, 'Could not build %s! See log for details.' % build_name)
		exit(1)

def pack_exe(exe_file):
	log(LOG_DEBUG, 'Packing: %s' % exe_file)
	args = [UPX_PATH, '--lzma', '-v', exe_file]
	return_code = subprocess.call(args, stdout=LOG_HANDLE)
	if return_code != 0:
		log(LOG_WARNING, 'Could not pack %s! See log for details.' % exe_file)

def copy_file(src_file, dst_file):
	log(LOG_DEBUG, 'Copying: %s => %s' % (src_file, dst_file))
	try:
		shutil.copy2(src_file, dst_file)
	except Exception as ex:
		log(LOG_ERROR, 'Could not copy %s!' % src_file)
		log(LOG_ERROR, traceback.format_exc(), False)
		exit(1)

def zip_up_file(zip, inc_file, arc_file):
	log(LOG_DEBUG, 'Zipping: %s => %s' % (inc_file, arc_file))
	try:
		zip.write(inc_file, arc_file)
	except Exception as ex:
		log(LOG_ERROR, 'Could not zip up %s!' % inc_file)
		log(LOG_ERROR, traceback.format_exc(), False)
		zip.close()
		exit(1)

################################################################################

class Log_Level(object):
	
	def __init__(self, name, attrs):
		self.name = name
		self.attrs = attrs

def log(level, s, show_level=True):
	message = s
	if show_level:
		message = '[' + level.name + '] ' + message
	set_text_attrs(level.attrs)
	print(message)
	set_text_attrs(DEFAULT_TEXT_ATTRS)
	LOG_HANDLE.write(message + '\n')

LOG_ERROR = Log_Level('ERROR', FOREGROUND_RED|FOREGROUND_INTENSITY)
LOG_WARNING = Log_Level('WARNING', FOREGROUND_YELLOW|FOREGROUND_INTENSITY)
LOG_INFO = Log_Level('INFO', DEFAULT_TEXT_ATTRS)
LOG_DEBUG = Log_Level('DEBUG', FOREGROUND_CYAN)

LOG_HANDLE = None # will be log file handle

################################################################################

# Get timestamp
timestamp = time.strftime('%Y%m%d')
BUILD_NAME = BUILD_NAME_FMT.format(timestamp=timestamp)

# Open log
ensure_dir_exists(DEPLOY_BASE_PATH)
log_file = join(DEPLOY_BASE_PATH, BUILD_NAME + '.log')
LOG_HANDLE = open(log_file, 'w')
log(LOG_INFO, 'Logging deployment to: %s' % log_file)

# Get the location of MSBuild.exe
MSBUILD_PATH = get_msbuild_location()
log(LOG_INFO, 'MSBuild.exe is located at: %s' % MSBUILD_PATH)

# Get the production version
version_components = map(str, get_version_components())
BOSS_VERSION_COMMAS = ','.join(version_components)
BOSS_VERSION_DOTS = '.'.join(version_components)
log(LOG_INFO, 'Production version is: %s' % BOSS_VERSION_DOTS)

# Update the project versions
log(LOG_INFO, 'Updating version headers...')
for version_header_file in VERSION_HEADERS:
	update_version_header(version_header_file)

# Ensure that builds are up-to-date
log(LOG_INFO, 'Building projects...')
for build_name in BUILD_ARGS:
	build_project(build_name)

# Pack project executables
log(LOG_INFO, 'Packing project executables')
for platform in DEPLOY_FILES:
	for src_file in DEPLOY_FILES[platform]:
		src_file, dst_name = src_file_dst_name(src_file)
		if src_file.lower().endswith('.exe'):
			pack_exe(src_file)

# Create directory to deploy files
DEPLOY_PATH = join(DEPLOY_BASE_PATH, BUILD_NAME)
ensure_dir_exists(DEPLOY_PATH)

# Deploy files
log(LOG_INFO, 'Deploying files to: %s' % DEPLOY_PATH)
for platform in DEPLOY_FILES:
	platform_path = join(DEPLOY_PATH, platform)
	if platform:
		log(LOG_INFO, 'Deploying %s-specific files to: %s' % (platform, platform_path))
	else:
		log(LOG_INFO, 'Deploying common files to: %s' % platform_path)
	ensure_dir_exists(platform_path)
	for src_file in DEPLOY_FILES[platform]:
		src_file, dst_name = src_file_dst_name(src_file)
		dst_file = join(platform_path, dst_name)
		copy_file(src_file, dst_file)

# Zip up files
zip_file = join(DEPLOY_BASE_PATH, BUILD_NAME + '.zip.rename')
log(LOG_INFO, 'Zipping build as: %s' % zip_file)
zip_handle = None
try:
	zip_handle = zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED)
	log(LOG_INFO, 'DEFLATE compression is enabled for zip files')
except RuntimeError as ex:
	zip_handle = zipfile.ZipFile(zip_file, 'w')
	log(LOG_WARNING, 'DEFLATE compression for zip files is not available')
for inc_file in traverse_dir(DEPLOY_PATH):
	arc_name = os.path.relpath(inc_file, DEPLOY_PATH)
	arc_file = join(BUILD_NAME, arc_name)
	zip_up_file(zip_handle, inc_file, arc_file)
zip_handle.close()

# Create directory to deploy files
DROPBOX_PATH = join(DROPBOX_BASE_PATH, BUILD_NAME)
ensure_dir_exists(DROPBOX_PATH)

# Copy files to Dropbox
log(LOG_INFO, 'Copying files to: %s' % DROPBOX_PATH)
for src_file in traverse_dir(DEPLOY_PATH):
	dst_name = os.path.relpath(src_file, DEPLOY_PATH)
	dst_file = join(DROPBOX_PATH, dst_name)
	dst_path = os.path.dirname(dst_file)
	ensure_dir_exists(dst_path)
	copy_file(src_file, dst_file)

# Copy zip to Dropbox
src_file = zip_file
dst_file = join(DROPBOX_BASE_PATH, BUILD_NAME + '.zip')
copy_file(src_file, dst_file)

# Close log
log(LOG_INFO, 'Finished deployment')
LOG_HANDLE.close()
